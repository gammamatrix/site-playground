<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2024-03-14 05:29:25</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>440</methodCount>
    <crapMethodCount>16</crapMethodCount>
    <crapLoad>243</crapLoad>
    <totalCrap>6283.02</totalCrap>
    <crapMethodPercent>3.64</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package>App\Providers</package>
      <className>App\Providers\AppServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>App\Providers</package>
      <className>App\Providers\AppServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot(): void</methodSignature>
      <fullMethod>boot(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Can</className>
      <methodName>matches</methodName>
      <methodSignature>matches(?Illuminate\Contracts\Auth\Authenticatable $user): bool</methodSignature>
      <fullMethod>matches(?Illuminate\Contracts\Auth\Authenticatable $user): bool</fullMethod>
      <crap>38.11</crap>
      <complexity>8</complexity>
      <coverage>22.22</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Can</className>
      <methodName>init</methodName>
      <methodSignature>init(?Illuminate\Contracts\Auth\Authenticatable $user): self</methodSignature>
      <fullMethod>init(?Illuminate\Contracts\Auth\Authenticatable $user): self</fullMethod>
      <crap>14</crap>
      <complexity>14</complexity>
      <coverage>97.06</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Can</className>
      <methodName>reset</methodName>
      <methodSignature>reset(?Illuminate\Contracts\Auth\Authenticatable $user): self</methodSignature>
      <fullMethod>reset(?Illuminate\Contracts\Auth\Authenticatable $user): self</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Can</className>
      <methodName>isGuest</methodName>
      <methodSignature>isGuest(?Illuminate\Contracts\Auth\Authenticatable $user): bool</methodSignature>
      <fullMethod>isGuest(?Illuminate\Contracts\Auth\Authenticatable $user): bool</fullMethod>
      <crap>4.07</crap>
      <complexity>4</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Can</className>
      <methodName>map</methodName>
      <methodSignature>map(array $privileges, ?Illuminate\Contracts\Auth\Authenticatable $user): array</methodSignature>
      <fullMethod>map(array $privileges, ?Illuminate\Contracts\Auth\Authenticatable $user): array</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Can</className>
      <methodName>wildcards</methodName>
      <methodSignature>wildcards(string $privilege): array</methodSignature>
      <fullMethod>wildcards(string $privilege): array</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Can</className>
      <methodName>access</methodName>
      <methodSignature>access(?Illuminate\Contracts\Auth\Authenticatable $user, array $options): Playground\Auth\Permission</methodSignature>
      <fullMethod>access(?Illuminate\Contracts\Auth\Authenticatable $user, array $options): Playground\Auth\Permission</fullMethod>
      <crap>1806.54</crap>
      <complexity>49</complexity>
      <coverage>9.88</coverage>
      <crapLoad>45</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Can</className>
      <methodName>withPrivilege</methodName>
      <methodSignature>withPrivilege(array $meta): string</methodSignature>
      <fullMethod>withPrivilege(array $meta): string</fullMethod>
      <crap>6.07</crap>
      <complexity>6</complexity>
      <coverage>87.5</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Console\Commands</package>
      <className>Playground\Auth\Console\Commands\HashPassword</className>
      <methodName>handle</methodName>
      <methodSignature>handle()</methodSignature>
      <fullMethod>handle()</fullMethod>
      <crap>9.02</crap>
      <complexity>9</complexity>
      <coverage>93.75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Facades</package>
      <className>Playground\Auth\Facades\Can</className>
      <methodName>getFacadeAccessor</methodName>
      <methodSignature>getFacadeAccessor()</methodSignature>
      <fullMethod>getFacadeAccessor()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Issuer</className>
      <methodName>useSanctum</methodName>
      <methodSignature>useSanctum(): bool</methodSignature>
      <fullMethod>useSanctum(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Issuer</className>
      <methodName>compileAbilitiesByGroup</methodName>
      <methodSignature>compileAbilitiesByGroup(string $group): array</methodSignature>
      <fullMethod>compileAbilitiesByGroup(string $group): array</fullMethod>
      <crap>245.47</crap>
      <complexity>28</complexity>
      <coverage>34.78</coverage>
      <crapLoad>19</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Issuer</className>
      <methodName>abilitiesByGroup</methodName>
      <methodSignature>abilitiesByGroup(string $group): array</methodSignature>
      <fullMethod>abilitiesByGroup(string $group): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Issuer</className>
      <methodName>abilities</methodName>
      <methodSignature>abilities(Illuminate\Contracts\Auth\Authenticatable $user): array</methodSignature>
      <fullMethod>abilities(Illuminate\Contracts\Auth\Authenticatable $user): array</fullMethod>
      <crap>14.62</crap>
      <complexity>12</complexity>
      <coverage>73.68</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Issuer</className>
      <methodName>init</methodName>
      <methodSignature>init(Illuminate\Contracts\Auth\Authenticatable $user): self</methodSignature>
      <fullMethod>init(Illuminate\Contracts\Auth\Authenticatable $user): self</fullMethod>
      <crap>26.18</crap>
      <complexity>21</complexity>
      <coverage>77.27</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Issuer</className>
      <methodName>listed</methodName>
      <methodSignature>listed(Illuminate\Contracts\Auth\Authenticatable $user): void</methodSignature>
      <fullMethod>listed(Illuminate\Contracts\Auth\Authenticatable $user): void</fullMethod>
      <crap>7.54</crap>
      <complexity>7</complexity>
      <coverage>77.78</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Issuer</className>
      <methodName>authorize</methodName>
      <methodSignature>authorize(Illuminate\Contracts\Auth\Authenticatable $user): array</methodSignature>
      <fullMethod>authorize(Illuminate\Contracts\Auth\Authenticatable $user): array</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Issuer</className>
      <methodName>sanctum</methodName>
      <methodSignature>sanctum(Illuminate\Contracts\Auth\Authenticatable $user): array</methodSignature>
      <fullMethod>sanctum(Illuminate\Contracts\Auth\Authenticatable $user): array</fullMethod>
      <crap>7.06</crap>
      <complexity>7</complexity>
      <coverage>89.47</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Permission</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(string $verify)</methodSignature>
      <fullMethod>__construct(string $verify)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Permission</className>
      <methodName>markAllowed</methodName>
      <methodSignature>markAllowed(): self</methodSignature>
      <fullMethod>markAllowed(): self</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Permission</className>
      <methodName>markIsGuest</methodName>
      <methodSignature>markIsGuest(): self</methodSignature>
      <fullMethod>markIsGuest(): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Permission</className>
      <methodName>allowed</methodName>
      <methodSignature>allowed(): bool</methodSignature>
      <fullMethod>allowed(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\Permission</className>
      <methodName>isGuest</methodName>
      <methodSignature>isGuest(): bool</methodSignature>
      <fullMethod>isGuest(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>create</methodName>
      <methodSignature>create(Illuminate\Contracts\Auth\Authenticatable $user): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>create(Illuminate\Contracts\Auth\Authenticatable $user): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>delete</methodName>
      <methodSignature>delete(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>delete(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>detail</methodName>
      <methodSignature>detail(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>detail(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>edit</methodName>
      <methodSignature>edit(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>edit(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>forceDelete</methodName>
      <methodSignature>forceDelete(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>forceDelete(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>lock</methodName>
      <methodSignature>lock(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>lock(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>manage</methodName>
      <methodSignature>manage(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>manage(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>restore</methodName>
      <methodSignature>restore(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>restore(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>store</methodName>
      <methodSignature>store(Illuminate\Contracts\Auth\Authenticatable $user): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>store(Illuminate\Contracts\Auth\Authenticatable $user): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>update</methodName>
      <methodSignature>update(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>update(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\ModelPolicy</className>
      <methodName>unlock</methodName>
      <methodSignature>unlock(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>unlock(Illuminate\Contracts\Auth\Authenticatable $user, Illuminate\Database\Eloquent\Model $model): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\Policy</className>
      <methodName>before</methodName>
      <methodSignature>before(Illuminate\Contracts\Auth\Authenticatable $user, $ability)</methodSignature>
      <fullMethod>before(Illuminate\Contracts\Auth\Authenticatable $user, $ability)</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\Policy</className>
      <methodName>index</methodName>
      <methodSignature>index(Illuminate\Contracts\Auth\Authenticatable $user): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>index(Illuminate\Contracts\Auth\Authenticatable $user): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\Policy</className>
      <methodName>view</methodName>
      <methodSignature>view(Illuminate\Contracts\Auth\Authenticatable $user): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>view(Illuminate\Contracts\Auth\Authenticatable $user): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>hasPrivilege</methodName>
      <methodSignature>hasPrivilege(Illuminate\Contracts\Auth\Authenticatable $user, string $privilege): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>hasPrivilege(Illuminate\Contracts\Auth\Authenticatable $user, string $privilege): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>hasRole</methodName>
      <methodSignature>hasRole(Illuminate\Contracts\Auth\Authenticatable $user, string $ability): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>hasRole(Illuminate\Contracts\Auth\Authenticatable $user, string $ability): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>privilege</methodName>
      <methodSignature>privilege(string $ability): string</methodSignature>
      <fullMethod>privilege(string $ability): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>getEntity</methodName>
      <methodSignature>getEntity(): string</methodSignature>
      <fullMethod>getEntity(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage(): string</methodSignature>
      <fullMethod>getPackage(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>hasToken</methodName>
      <methodSignature>hasToken(): bool</methodSignature>
      <fullMethod>hasToken(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>getToken</methodName>
      <methodSignature>getToken(): ?Laravel\Sanctum\PersonalAccessToken</methodSignature>
      <fullMethod>getToken(): ?Laravel\Sanctum\PersonalAccessToken</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>setToken</methodName>
      <methodSignature>setToken(Laravel\Sanctum\PersonalAccessToken $token): self</methodSignature>
      <fullMethod>setToken(Laravel\Sanctum\PersonalAccessToken $token): self</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PolicyTrait</className>
      <methodName>verify</methodName>
      <methodSignature>verify(Illuminate\Contracts\Auth\Authenticatable $user, string $ability): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>verify(Illuminate\Contracts\Auth\Authenticatable $user, string $ability): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>8.01</crap>
      <complexity>8</complexity>
      <coverage>94.12</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage(): string</methodSignature>
      <fullMethod>getPackage(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>getEntity</methodName>
      <methodSignature>getEntity(): string</methodSignature>
      <fullMethod>getEntity(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>getToken</methodName>
      <methodSignature>getToken(): ?Laravel\Sanctum\PersonalAccessToken</methodSignature>
      <fullMethod>getToken(): ?Laravel\Sanctum\PersonalAccessToken</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>hasToken</methodName>
      <methodSignature>hasToken(): bool</methodSignature>
      <fullMethod>hasToken(): bool</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>setToken</methodName>
      <methodSignature>setToken(Laravel\Sanctum\PersonalAccessToken $token): self</methodSignature>
      <fullMethod>setToken(Laravel\Sanctum\PersonalAccessToken $token): self</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>privilege</methodName>
      <methodSignature>privilege(string $ability): string</methodSignature>
      <fullMethod>privilege(string $ability): string</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>hasPrivilegeWildcard</methodName>
      <methodSignature>hasPrivilegeWildcard(string $privilege): bool</methodSignature>
      <fullMethod>hasPrivilegeWildcard(string $privilege): bool</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>hasPrivilege</methodName>
      <methodSignature>hasPrivilege(Illuminate\Contracts\Auth\Authenticatable $user, string $privilege): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>hasPrivilege(Illuminate\Contracts\Auth\Authenticatable $user, string $privilege): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>10.05</crap>
      <complexity>10</complexity>
      <coverage>92.31</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\PrivilegeTrait</className>
      <methodName>hasPrivilegeSanctum</methodName>
      <methodSignature>hasPrivilegeSanctum(Laravel\Sanctum\Contracts\HasApiTokens $user, string $privilege): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>hasPrivilegeSanctum(Laravel\Sanctum\Contracts\HasApiTokens $user, string $privilege): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\RoleTrait</className>
      <methodName>getRolesForAdmin</methodName>
      <methodSignature>getRolesForAdmin(): array</methodSignature>
      <fullMethod>getRolesForAdmin(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\RoleTrait</className>
      <methodName>getRolesForAction</methodName>
      <methodSignature>getRolesForAction(): array</methodSignature>
      <fullMethod>getRolesForAction(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\RoleTrait</className>
      <methodName>isRoot</methodName>
      <methodSignature>isRoot(Illuminate\Contracts\Auth\Authenticatable $user): bool</methodSignature>
      <fullMethod>isRoot(Illuminate\Contracts\Auth\Authenticatable $user): bool</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\RoleTrait</className>
      <methodName>getRolesToView</methodName>
      <methodSignature>getRolesToView(): array</methodSignature>
      <fullMethod>getRolesToView(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth\Policies</package>
      <className>Playground\Auth\Policies\RoleTrait</className>
      <methodName>hasRole</methodName>
      <methodSignature>hasRole(Illuminate\Contracts\Auth\Authenticatable $user, string $ability): bool|\Illuminate\Auth\Access\Response</methodSignature>
      <fullMethod>hasRole(Illuminate\Contracts\Auth\Authenticatable $user, string $ability): bool|\Illuminate\Auth\Access\Response</fullMethod>
      <crap>18</crap>
      <complexity>18</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\ServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot()</methodSignature>
      <fullMethod>boot()</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\ServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\ServiceProvider</className>
      <methodName>about</methodName>
      <methodSignature>about(): void</methodSignature>
      <fullMethod>about(): void</fullMethod>
      <crap>47.11</crap>
      <complexity>46</complexity>
      <coverage>91.94</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Auth</package>
      <className>Playground\Auth\ServiceProvider</className>
      <methodName>version</methodName>
      <methodSignature>version(): string</methodSignature>
      <fullMethod>version(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Asset</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(mixed $options)</methodSignature>
      <fullMethod>__construct(mixed $options)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Asset</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Asset</className>
      <methodName>docs</methodName>
      <methodSignature>docs(): string</methodSignature>
      <fullMethod>docs(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Comment</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Comment</className>
      <methodName>always</methodName>
      <methodSignature>always(): bool</methodSignature>
      <fullMethod>always(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Comment</className>
      <methodName>comment</methodName>
      <methodSignature>comment(): string</methodSignature>
      <fullMethod>comment(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Comment</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString(): string</methodSignature>
      <fullMethod>__toString(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Font</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString(): string</methodSignature>
      <fullMethod>__toString(): string</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Icon</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>3.07</crap>
      <complexity>3</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Icon</className>
      <methodName>sizes</methodName>
      <methodSignature>sizes(): string</methodSignature>
      <fullMethod>sizes(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Icon</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString(): string</methodSignature>
      <fullMethod>__toString(): string</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>15.13</crap>
      <complexity>15</complexity>
      <coverage>91.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>always</methodName>
      <methodSignature>always(): bool</methodSignature>
      <fullMethod>always(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>as</methodName>
      <methodSignature>as(): string</methodSignature>
      <fullMethod>as(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>crossorigin</methodName>
      <methodSignature>crossorigin(): string</methodSignature>
      <fullMethod>crossorigin(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>href</methodName>
      <methodSignature>href(): string</methodSignature>
      <fullMethod>href(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>integrity</methodName>
      <methodSignature>integrity(): string</methodSignature>
      <fullMethod>integrity(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>media</methodName>
      <methodSignature>media(): string</methodSignature>
      <fullMethod>media(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>rel</methodName>
      <methodSignature>rel(): string</methodSignature>
      <fullMethod>rel(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>title</methodName>
      <methodSignature>title(): string</methodSignature>
      <fullMethod>title(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>type</methodName>
      <methodSignature>type(): string</methodSignature>
      <fullMethod>type(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Link</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString(): string</methodSignature>
      <fullMethod>__toString(): string</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>15.08</crap>
      <complexity>15</complexity>
      <coverage>92.86</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>always</methodName>
      <methodSignature>always(): bool</methodSignature>
      <fullMethod>always(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>async</methodName>
      <methodSignature>async(): bool</methodSignature>
      <fullMethod>async(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>nomodule</methodName>
      <methodSignature>nomodule(): bool</methodSignature>
      <fullMethod>nomodule(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>defer</methodName>
      <methodSignature>defer(): bool</methodSignature>
      <fullMethod>defer(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>scoped</methodName>
      <methodSignature>scoped(): bool</methodSignature>
      <fullMethod>scoped(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>crossorigin</methodName>
      <methodSignature>crossorigin(): string</methodSignature>
      <fullMethod>crossorigin(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>fetchpriority</methodName>
      <methodSignature>fetchpriority(): string</methodSignature>
      <fullMethod>fetchpriority(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>integrity</methodName>
      <methodSignature>integrity(): string</methodSignature>
      <fullMethod>integrity(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>referrerpolicy</methodName>
      <methodSignature>referrerpolicy(): string</methodSignature>
      <fullMethod>referrerpolicy(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>script</methodName>
      <methodSignature>script(): string</methodSignature>
      <fullMethod>script(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>src</methodName>
      <methodSignature>src(): string</methodSignature>
      <fullMethod>src(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>version</methodName>
      <methodSignature>version(): string</methodSignature>
      <fullMethod>version(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>type</methodName>
      <methodSignature>type(): string</methodSignature>
      <fullMethod>type(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Script</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString(): string</methodSignature>
      <fullMethod>__toString(): string</fullMethod>
      <crap>11</crap>
      <complexity>11</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Style</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Style</className>
      <methodName>always</methodName>
      <methodSignature>always(): bool</methodSignature>
      <fullMethod>always(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Style</className>
      <methodName>style</methodName>
      <methodSignature>style(): string</methodSignature>
      <fullMethod>style(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Style</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString(): string</methodSignature>
      <fullMethod>__toString(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Stylesheet</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Stylesheet</className>
      <methodName>docs</methodName>
      <methodSignature>docs(): string</methodSignature>
      <fullMethod>docs(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Stylesheet</className>
      <methodName>version</methodName>
      <methodSignature>version(): string</methodSignature>
      <fullMethod>version(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Assets</package>
      <className>Playground\Blade\Assets\Stylesheet</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString(): string</methodSignature>
      <fullMethod>__toString(): string</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithAssets</className>
      <methodName>loadBodyAssets</methodName>
      <methodSignature>loadBodyAssets(array $assets): self</methodSignature>
      <fullMethod>loadBodyAssets(array $assets): self</fullMethod>
      <crap>13.09</crap>
      <complexity>13</complexity>
      <coverage>92</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithAssets</className>
      <methodName>loadHeadAssets</methodName>
      <methodSignature>loadHeadAssets(array $assets): self</methodSignature>
      <fullMethod>loadHeadAssets(array $assets): self</fullMethod>
      <crap>16</crap>
      <complexity>16</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithAssets</className>
      <methodName>bodyAssets</methodName>
      <methodSignature>bodyAssets(Playground\Blade\Themes\Theme $theme): array</methodSignature>
      <fullMethod>bodyAssets(Playground\Blade\Themes\Theme $theme): array</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithAssets</className>
      <methodName>headAssets</methodName>
      <methodSignature>headAssets(Playground\Blade\Themes\Theme $theme): array</methodSignature>
      <fullMethod>headAssets(Playground\Blade\Themes\Theme $theme): array</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>initThemes</methodName>
      <methodSignature>initThemes(): self</methodSignature>
      <fullMethod>initThemes(): self</fullMethod>
      <crap>9</crap>
      <complexity>9</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>loadThemes</methodName>
      <methodSignature>loadThemes(array $themes): self</methodSignature>
      <fullMethod>loadThemes(array $themes): self</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>theme</methodName>
      <methodSignature>theme(): Playground\Blade\Themes\Theme</methodSignature>
      <fullMethod>theme(): Playground\Blade\Themes\Theme</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>themes</methodName>
      <methodSignature>themes(): array</methodSignature>
      <fullMethod>themes(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>getTheme</methodName>
      <methodSignature>getTheme(string $key): ?Playground\Blade\Themes\Theme</methodSignature>
      <fullMethod>getTheme(string $key): ?Playground\Blade\Themes\Theme</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>hasTheme</methodName>
      <methodSignature>hasTheme(string $themeKey): bool</methodSignature>
      <fullMethod>hasTheme(string $themeKey): bool</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>saveTheme</methodName>
      <methodSignature>saveTheme(Playground\Blade\Themes\Theme $theme): self</methodSignature>
      <fullMethod>saveTheme(Playground\Blade\Themes\Theme $theme): self</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>setTheme</methodName>
      <methodSignature>setTheme(string $themeKey, bool $save): self</methodSignature>
      <fullMethod>setTheme(string $themeKey, bool $save): self</fullMethod>
      <crap>5.68</crap>
      <complexity>5</complexity>
      <coverage>70</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>session</methodName>
      <methodSignature>session(): bool</methodSignature>
      <fullMethod>session(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Concerns</package>
      <className>Playground\Blade\Concerns\WithThemes</className>
      <methodName>sessionThemeName</methodName>
      <methodSignature>sessionThemeName(): string</methodSignature>
      <fullMethod>sessionThemeName(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Facades</package>
      <className>Playground\Blade\Facades\Ui</className>
      <methodName>getFacadeAccessor</methodName>
      <methodSignature>getFacadeAccessor()</methodSignature>
      <fullMethod>getFacadeAccessor()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade</package>
      <className>Playground\Blade\ServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot(): void</methodSignature>
      <fullMethod>boot(): void</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade</package>
      <className>Playground\Blade\ServiceProvider</className>
      <methodName>about</methodName>
      <methodSignature>about(): void</methodSignature>
      <fullMethod>about(): void</fullMethod>
      <crap>11</crap>
      <complexity>11</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade</package>
      <className>Playground\Blade\ServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade</package>
      <className>Playground\Blade\ServiceProvider</className>
      <methodName>version</methodName>
      <methodSignature>version(): string</methodSignature>
      <fullMethod>version(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade</package>
      <className>Playground\Blade\ServiceProvider</className>
      <methodName>publishesAssets</methodName>
      <methodSignature>publishesAssets(): void</methodSignature>
      <fullMethod>publishesAssets(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Bootstrap</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Bootstrap</className>
      <methodName>bsTheme</methodName>
      <methodSignature>bsTheme(): string</methodSignature>
      <fullMethod>bsTheme(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(mixed $options)</methodSignature>
      <fullMethod>__construct(mixed $options)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>initAssets</methodName>
      <methodSignature>initAssets(): self</methodSignature>
      <fullMethod>initAssets(): self</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(array $options): self</methodSignature>
      <fullMethod>setOptions(array $options): self</fullMethod>
      <crap>13</crap>
      <complexity>13</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>enabled</methodName>
      <methodSignature>enabled(): bool</methodSignature>
      <fullMethod>enabled(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>key</methodName>
      <methodSignature>key(): string</methodSignature>
      <fullMethod>key(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>provider</methodName>
      <methodSignature>provider(): string</methodSignature>
      <fullMethod>provider(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>label</methodName>
      <methodSignature>label(): string</methodSignature>
      <fullMethod>label(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>icon</methodName>
      <methodSignature>icon(): string</methodSignature>
      <fullMethod>icon(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\Themes</package>
      <className>Playground\Blade\Themes\Theme</className>
      <methodName>session</methodName>
      <methodSignature>session(): bool</methodSignature>
      <fullMethod>session(): bool</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade</package>
      <className>Playground\Blade\Ui</className>
      <methodName>initAssets</methodName>
      <methodSignature>initAssets(): self</methodSignature>
      <fullMethod>initAssets(): self</fullMethod>
      <crap>9</crap>
      <complexity>9</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components\Forms</package>
      <className>Playground\Blade\View\Components\Forms\Column</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(bool $advanced, ?bool $autocomplete, string $class, string $column, string $default, string $described, ?bool $disabled, string $errorMessage, string $label, string $pattern, bool|string $placeholder, ?bool $readonly, array $rules, ?int $step, string $type, bool $withoutMargin)</methodSignature>
      <fullMethod>__construct(bool $advanced, ?bool $autocomplete, string $class, string $column, string $default, string $described, ?bool $disabled, string $errorMessage, string $label, string $pattern, bool|string $placeholder, ?bool $readonly, array $rules, ?int $step, string $type, bool $withoutMargin)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components\Forms</package>
      <className>Playground\Blade\View\Components\Forms\Column</className>
      <methodName>render</methodName>
      <methodSignature>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</methodSignature>
      <fullMethod>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components\Forms</package>
      <className>Playground\Blade\View\Components\Forms\ColumnEditor</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(bool $advanced, string $class, string $column, string $errorMessage, string $label, array $rules, bool $withoutMargin, string $described, ?bool $disabled, ?bool $readonly)</methodSignature>
      <fullMethod>__construct(bool $advanced, string $class, string $column, string $errorMessage, string $label, array $rules, bool $withoutMargin, string $described, ?bool $disabled, ?bool $readonly)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components\Forms</package>
      <className>Playground\Blade\View\Components\Forms\ColumnEditor</className>
      <methodName>render</methodName>
      <methodSignature>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</methodSignature>
      <fullMethod>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components\Forms</package>
      <className>Playground\Blade\View\Components\Forms\ColumnSelect</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(bool $advanced, ?bool $autocomplete, string $class, string $column, bool $default, string $described, ?bool $disabled, string $errorMessage, string $id, string $key, string $label, string $pattern, bool|string $placeholder, array $records, array $rules, string $step, ?bool $readonly, string $type, bool $withoutMargin)</methodSignature>
      <fullMethod>__construct(bool $advanced, ?bool $autocomplete, string $class, string $column, bool $default, string $described, ?bool $disabled, string $errorMessage, string $id, string $key, string $label, string $pattern, bool|string $placeholder, array $records, array $rules, string $step, ?bool $readonly, string $type, bool $withoutMargin)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components\Forms</package>
      <className>Playground\Blade\View\Components\Forms\ColumnSelect</className>
      <methodName>render</methodName>
      <methodSignature>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</methodSignature>
      <fullMethod>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components</package>
      <className>Playground\Blade\View\Components\ModelFlag</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(array $columnMeta, mixed $value)</methodSignature>
      <fullMethod>__construct(array $columnMeta, mixed $value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components</package>
      <className>Playground\Blade\View\Components\ModelFlag</className>
      <methodName>render</methodName>
      <methodSignature>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</methodSignature>
      <fullMethod>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components\Table</package>
      <className>Playground\Blade\View\Components\Table\Data</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(string $id, string $icon, string $badge, bool $showPagination, bool $showLinks, bool $modelActions, bool $trashable, string $privilege, string $routeParameter, string $routeParameterKey, string $routeEdit, string $routeRestore, string $routeUnlock, string $routeDelete, string $routeDeleteRelationship, string $routeDeleteRelationshipId, bool $collapsible, string $returnUrl, array $columns, array $filters, array $validated, array $meta, array $sort, array $page_options, int $sorts, array $styling, string $class, ?Illuminate\Pagination\LengthAwarePaginator $paginator)</methodSignature>
      <fullMethod>__construct(string $id, string $icon, string $badge, bool $showPagination, bool $showLinks, bool $modelActions, bool $trashable, string $privilege, string $routeParameter, string $routeParameterKey, string $routeEdit, string $routeRestore, string $routeUnlock, string $routeDelete, string $routeDeleteRelationship, string $routeDeleteRelationshipId, bool $collapsible, string $returnUrl, array $columns, array $filters, array $validated, array $meta, array $sort, array $page_options, int $sorts, array $styling, string $class, ?Illuminate\Pagination\LengthAwarePaginator $paginator)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Blade\View\Components\Table</package>
      <className>Playground\Blade\View\Components\Table\Data</className>
      <methodName>render</methodName>
      <methodSignature>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</methodSignature>
      <fullMethod>render(): \Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationColumns</className>
      <methodName>getPaginationColumns</methodName>
      <methodSignature>getPaginationColumns(): array</methodSignature>
      <fullMethod>getPaginationColumns(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationColumns</className>
      <methodName>rules_filters_columns</methodName>
      <methodSignature>rules_filters_columns(array $rules): void</methodSignature>
      <fullMethod>rules_filters_columns(array $rules): void</fullMethod>
      <crap>240</crap>
      <complexity>15</complexity>
      <coverage>0</coverage>
      <crapLoad>15</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationDates</className>
      <methodName>getPaginationDates</methodName>
      <methodSignature>getPaginationDates(): array</methodSignature>
      <fullMethod>getPaginationDates(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationDates</className>
      <methodName>rules_filters_dates</methodName>
      <methodSignature>rules_filters_dates(array $rules): void</methodSignature>
      <fullMethod>rules_filters_dates(array $rules): void</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationDates</className>
      <methodName>prepareForValidationForDates</methodName>
      <methodSignature>prepareForValidationForDates(): ?array</methodSignature>
      <fullMethod>prepareForValidationForDates(): ?array</fullMethod>
      <crap>420</crap>
      <complexity>20</complexity>
      <coverage>0</coverage>
      <crapLoad>20</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationFlags</className>
      <methodName>getPaginationFlags</methodName>
      <methodSignature>getPaginationFlags(): array</methodSignature>
      <fullMethod>getPaginationFlags(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationFlags</className>
      <methodName>rules_filters_flags</methodName>
      <methodSignature>rules_filters_flags(array $rules): void</methodSignature>
      <fullMethod>rules_filters_flags(array $rules): void</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationIds</className>
      <methodName>getPaginationIds</methodName>
      <methodSignature>getPaginationIds(): array</methodSignature>
      <fullMethod>getPaginationIds(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationIds</className>
      <methodName>rules_filters_ids</methodName>
      <methodSignature>rules_filters_ids(array $rules): void</methodSignature>
      <fullMethod>rules_filters_ids(array $rules): void</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationIds</className>
      <methodName>prepareForValidationIds</methodName>
      <methodSignature>prepareForValidationIds(): array</methodSignature>
      <fullMethod>prepareForValidationIds(): array</fullMethod>
      <crap>380</crap>
      <complexity>19</complexity>
      <coverage>0</coverage>
      <crapLoad>19</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationOperators</className>
      <methodName>getPaginationOperators</methodName>
      <methodSignature>getPaginationOperators(): array</methodSignature>
      <fullMethod>getPaginationOperators(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationSortable</className>
      <methodName>getSortable</methodName>
      <methodSignature>getSortable(): array</methodSignature>
      <fullMethod>getSortable(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationSortable</className>
      <methodName>rules_sortable</methodName>
      <methodSignature>rules_sortable(array $rules): void</methodSignature>
      <fullMethod>rules_sortable(array $rules): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\PaginationSortable</className>
      <methodName>prepareForValidationSort</methodName>
      <methodSignature>prepareForValidationSort(): array</methodSignature>
      <fullMethod>prepareForValidationSort(): array</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreContent</className>
      <methodName>exorcise</methodName>
      <methodSignature>exorcise(mixed $content): string</methodSignature>
      <fullMethod>exorcise(mixed $content): string</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreContent</className>
      <methodName>purify</methodName>
      <methodSignature>purify(mixed $content): string</methodSignature>
      <fullMethod>purify(mixed $content): string</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreContent</className>
      <methodName>getHtmlPurifier</methodName>
      <methodSignature>getHtmlPurifier(array $config): HTMLPurifier</methodSignature>
      <fullMethod>getHtmlPurifier(array $config): HTMLPurifier</fullMethod>
      <crap>13</crap>
      <complexity>13</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterArray</methodName>
      <methodSignature>filterArray(mixed $value): array</methodSignature>
      <fullMethod>filterArray(mixed $value): array</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterArrayToJson</methodName>
      <methodSignature>filterArrayToJson(mixed $value): string|false</methodSignature>
      <fullMethod>filterArrayToJson(mixed $value): string|false</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterBits</methodName>
      <methodSignature>filterBits($value, $exponent): int</methodSignature>
      <fullMethod>filterBits($value, $exponent): int</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterBoolean</methodName>
      <methodSignature>filterBoolean(mixed $value): bool</methodSignature>
      <fullMethod>filterBoolean(mixed $value): bool</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterDate</methodName>
      <methodSignature>filterDate(mixed $value, $locale): ?string</methodSignature>
      <fullMethod>filterDate(mixed $value, $locale): ?string</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterDateAsCarbon</methodName>
      <methodSignature>filterDateAsCarbon($value, $locale): ?Illuminate\Support\Carbon</methodSignature>
      <fullMethod>filterDateAsCarbon($value, $locale): ?Illuminate\Support\Carbon</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterEmail</methodName>
      <methodSignature>filterEmail(mixed $email): string</methodSignature>
      <fullMethod>filterEmail(mixed $email): string</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterFloat</methodName>
      <methodSignature>filterFloat(mixed $value, $locale): ?float</methodSignature>
      <fullMethod>filterFloat(mixed $value, $locale): ?float</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterHtml</methodName>
      <methodSignature>filterHtml(mixed $content): string</methodSignature>
      <fullMethod>filterHtml(mixed $content): string</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterInteger</methodName>
      <methodSignature>filterInteger(mixed $value, $locale): int</methodSignature>
      <fullMethod>filterInteger(mixed $value, $locale): int</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterIntegerId</methodName>
      <methodSignature>filterIntegerId(mixed $value): ?int</methodSignature>
      <fullMethod>filterIntegerId(mixed $value): ?int</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterIntegerPositive</methodName>
      <methodSignature>filterIntegerPositive(mixed $value, $absolute): int</methodSignature>
      <fullMethod>filterIntegerPositive(mixed $value, $absolute): int</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterPercent</methodName>
      <methodSignature>filterPercent(mixed $value, $locale): ?float</methodSignature>
      <fullMethod>filterPercent(mixed $value, $locale): ?float</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterPhone</methodName>
      <methodSignature>filterPhone(mixed $value, string $locale): string</methodSignature>
      <fullMethod>filterPhone(mixed $value, string $locale): string</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>97.56</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterStatus</methodName>
      <methodSignature>filterStatus(array $input): void</methodSignature>
      <fullMethod>filterStatus(array $input): void</fullMethod>
      <crap>7</crap>
      <complexity>7</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterCommonFields</methodName>
      <methodSignature>filterCommonFields(array $input): void</methodSignature>
      <fullMethod>filterCommonFields(array $input): void</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterContentFields</methodName>
      <methodSignature>filterContentFields(array $input): void</methodSignature>
      <fullMethod>filterContentFields(array $input): void</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterSystemFields</methodName>
      <methodSignature>filterSystemFields(array $input): void</methodSignature>
      <fullMethod>filterSystemFields(array $input): void</fullMethod>
      <crap>19</crap>
      <complexity>19</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterUri</methodName>
      <methodSignature>filterUri(mixed $value): string</methodSignature>
      <fullMethod>filterUri(mixed $value): string</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreFilter</className>
      <methodName>filterUuid</methodName>
      <methodSignature>filterUuid(mixed $value): ?string</methodSignature>
      <fullMethod>filterUuid(mixed $value): ?string</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreSlug</className>
      <methodName>rules_store_slug_create</methodName>
      <methodSignature>rules_store_slug_create(array $rules): void</methodSignature>
      <fullMethod>rules_store_slug_create(array $rules): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreSlug</className>
      <methodName>rules_store_slug_update</methodName>
      <methodSignature>rules_store_slug_update(array $rules): void</methodSignature>
      <fullMethod>rules_store_slug_update(array $rules): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests\Concerns</package>
      <className>Playground\Http\Requests\Concerns\StoreSlug</className>
      <methodName>prepareForValidationForSlug</methodName>
      <methodSignature>prepareForValidationForSlug(): array</methodSignature>
      <fullMethod>prepareForValidationForSlug(): array</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\FormRequest</className>
      <methodName>authorize</methodName>
      <methodSignature>authorize(): bool</methodSignature>
      <fullMethod>authorize(): bool</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\FormRequest</className>
      <methodName>rules</methodName>
      <methodSignature>rules(): array</methodSignature>
      <fullMethod>rules(): array</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\IndexRequest</className>
      <methodName>rules</methodName>
      <methodSignature>rules(): array</methodSignature>
      <fullMethod>rules(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\IndexRequest</className>
      <methodName>rules_filters</methodName>
      <methodSignature>rules_filters(array $rules): void</methodSignature>
      <fullMethod>rules_filters(array $rules): void</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\IndexRequest</className>
      <methodName>prepareForValidation</methodName>
      <methodSignature>prepareForValidation(): void</methodSignature>
      <fullMethod>prepareForValidation(): void</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\IndexRequest</className>
      <methodName>passedValidation</methodName>
      <methodSignature>passedValidation()</methodSignature>
      <fullMethod>passedValidation()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\IndexRequest</className>
      <methodName>prepareForValidationPagination</methodName>
      <methodSignature>prepareForValidationPagination(): array</methodSignature>
      <fullMethod>prepareForValidationPagination(): array</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\StoreRequest</className>
      <methodName>messages</methodName>
      <methodSignature>messages(): array</methodSignature>
      <fullMethod>messages(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\StoreRequest</className>
      <methodName>rules</methodName>
      <methodSignature>rules(): array</methodSignature>
      <fullMethod>rules(): array</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\StoreRequest</className>
      <methodName>prepareForValidation</methodName>
      <methodSignature>prepareForValidation()</methodSignature>
      <fullMethod>prepareForValidation()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\UpdateRequest</className>
      <methodName>messages</methodName>
      <methodSignature>messages(): array</methodSignature>
      <fullMethod>messages(): array</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\UpdateRequest</className>
      <methodName>rules</methodName>
      <methodSignature>rules(): array</methodSignature>
      <fullMethod>rules(): array</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http\Requests</package>
      <className>Playground\Http\Requests\UpdateRequest</className>
      <methodName>prepareForValidation</methodName>
      <methodSignature>prepareForValidation()</methodSignature>
      <fullMethod>prepareForValidation()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http</package>
      <className>Playground\Http\ServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot()</methodSignature>
      <fullMethod>boot()</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http</package>
      <className>Playground\Http\ServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http</package>
      <className>Playground\Http\ServiceProvider</className>
      <methodName>about</methodName>
      <methodSignature>about(): void</methodSignature>
      <fullMethod>about(): void</fullMethod>
      <crap>7</crap>
      <complexity>7</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Http</package>
      <className>Playground\Http\ServiceProvider</className>
      <methodName>version</methodName>
      <methodSignature>version(): string</methodSignature>
      <fullMethod>version(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateJsonTrait</className>
      <methodName>getStructureCreate</methodName>
      <methodSignature>getStructureCreate(): array</methodSignature>
      <fullMethod>getStructureCreate(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateJsonTrait</className>
      <methodName>test_json_guest_cannot_get_create_info</methodName>
      <methodSignature>test_json_guest_cannot_get_create_info()</methodSignature>
      <fullMethod>test_json_guest_cannot_get_create_info()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateJsonTrait</className>
      <methodName>test_json_admin_can_get_create_info</methodName>
      <methodSignature>test_json_admin_can_get_create_info()</methodSignature>
      <fullMethod>test_json_admin_can_get_create_info()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateJsonTrait</className>
      <methodName>test_json_get_create_info_as_admin_with_invalid_parameter_and_fail_validation</methodName>
      <methodSignature>test_json_get_create_info_as_admin_with_invalid_parameter_and_fail_validation()</methodSignature>
      <fullMethod>test_json_get_create_info_as_admin_with_invalid_parameter_and_fail_validation()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateTrait</className>
      <methodName>test_guest_cannot_render_create_view</methodName>
      <methodSignature>test_guest_cannot_render_create_view()</methodSignature>
      <fullMethod>test_guest_cannot_render_create_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateTrait</className>
      <methodName>test_admin_can_render_create_view</methodName>
      <methodSignature>test_admin_can_render_create_view()</methodSignature>
      <fullMethod>test_admin_can_render_create_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateTrait</className>
      <methodName>test_admin_can_render_create_view_with_return_url</methodName>
      <methodSignature>test_admin_can_render_create_view_with_return_url()</methodSignature>
      <fullMethod>test_admin_can_render_create_view_with_return_url()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\CreateTrait</className>
      <methodName>test_create_view_as_admin_with_invalid_parameter_and_fail_validation_and_redirect</methodName>
      <methodSignature>test_create_view_as_admin_with_invalid_parameter_and_fail_validation_and_redirect()</methodSignature>
      <fullMethod>test_create_view_as_admin_with_invalid_parameter_and_fail_validation_and_redirect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyJsonTrait</className>
      <methodName>test_json_guest_cannot_destroy</methodName>
      <methodSignature>test_json_guest_cannot_destroy()</methodSignature>
      <fullMethod>test_json_guest_cannot_destroy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyJsonTrait</className>
      <methodName>test_json_destroy_as_admin_and_succeed</methodName>
      <methodSignature>test_json_destroy_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_json_destroy_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyJsonTrait</className>
      <methodName>test_json_destroy_as_admin_and_succeed_with_force_delete</methodName>
      <methodSignature>test_json_destroy_as_admin_and_succeed_with_force_delete()</methodSignature>
      <fullMethod>test_json_destroy_as_admin_and_succeed_with_force_delete()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyJsonTrait</className>
      <methodName>test_json_destroy_as_admin_and_succeed_with_no_content</methodName>
      <methodSignature>test_json_destroy_as_admin_and_succeed_with_no_content()</methodSignature>
      <fullMethod>test_json_destroy_as_admin_and_succeed_with_no_content()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyJsonTrait</className>
      <methodName>test_json_destroy_as_admin_and_succeed_and_ignore_redirect</methodName>
      <methodSignature>test_json_destroy_as_admin_and_succeed_and_ignore_redirect()</methodSignature>
      <fullMethod>test_json_destroy_as_admin_and_succeed_and_ignore_redirect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyJsonTrait</className>
      <methodName>test_json_destroy_as_user_and_get_denied_and_no_force_delete_allowed</methodName>
      <methodSignature>test_json_destroy_as_user_and_get_denied_and_no_force_delete_allowed()</methodSignature>
      <fullMethod>test_json_destroy_as_user_and_get_denied_and_no_force_delete_allowed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyTrait</className>
      <methodName>test_guest_cannot_destroy</methodName>
      <methodSignature>test_guest_cannot_destroy()</methodSignature>
      <fullMethod>test_guest_cannot_destroy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyTrait</className>
      <methodName>test_destroy_as_admin_and_succeed</methodName>
      <methodSignature>test_destroy_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_destroy_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyTrait</className>
      <methodName>test_destroy_as_admin_and_succeed_with_force_delete</methodName>
      <methodSignature>test_destroy_as_admin_and_succeed_with_force_delete()</methodSignature>
      <fullMethod>test_destroy_as_admin_and_succeed_with_force_delete()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyTrait</className>
      <methodName>test_destroy_as_admin_and_succeed_with_redirect_to_index_with_trash</methodName>
      <methodSignature>test_destroy_as_admin_and_succeed_with_redirect_to_index_with_trash()</methodSignature>
      <fullMethod>test_destroy_as_admin_and_succeed_with_redirect_to_index_with_trash()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\DestroyTrait</className>
      <methodName>test_destroy_as_user_and_get_denied_and_no_force_delete_allowed</methodName>
      <methodSignature>test_destroy_as_user_and_get_denied_and_no_force_delete_allowed()</methodSignature>
      <fullMethod>test_destroy_as_user_and_get_denied_and_no_force_delete_allowed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditJsonTrait</className>
      <methodName>getStructureEdit</methodName>
      <methodSignature>getStructureEdit(): array</methodSignature>
      <fullMethod>getStructureEdit(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditJsonTrait</className>
      <methodName>test_json_guest_cannot_get_edit_info</methodName>
      <methodSignature>test_json_guest_cannot_get_edit_info()</methodSignature>
      <fullMethod>test_json_guest_cannot_get_edit_info()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditJsonTrait</className>
      <methodName>test_json_admin_can_get_edit_info</methodName>
      <methodSignature>test_json_admin_can_get_edit_info()</methodSignature>
      <fullMethod>test_json_admin_can_get_edit_info()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditJsonTrait</className>
      <methodName>test_json_edit_as_admin_and_fail_validation_with_invalid_parameter</methodName>
      <methodSignature>test_json_edit_as_admin_and_fail_validation_with_invalid_parameter()</methodSignature>
      <fullMethod>test_json_edit_as_admin_and_fail_validation_with_invalid_parameter()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditTrait</className>
      <methodName>test_guest_cannot_render_edit_view</methodName>
      <methodSignature>test_guest_cannot_render_edit_view()</methodSignature>
      <fullMethod>test_guest_cannot_render_edit_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditTrait</className>
      <methodName>test_admin_can_render_edit_view</methodName>
      <methodSignature>test_admin_can_render_edit_view()</methodSignature>
      <fullMethod>test_admin_can_render_edit_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditTrait</className>
      <methodName>test_admin_can_render_edit_view_with_return_url</methodName>
      <methodSignature>test_admin_can_render_edit_view_with_return_url()</methodSignature>
      <fullMethod>test_admin_can_render_edit_view_with_return_url()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\EditTrait</className>
      <methodName>test_edit_view_as_admin_with_invalid_parameter_and_fail_validation_and_redirect</methodName>
      <methodSignature>test_edit_view_as_admin_with_invalid_parameter_and_fail_validation_and_redirect()</methodSignature>
      <fullMethod>test_edit_view_as_admin_with_invalid_parameter_and_fail_validation_and_redirect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexJsonTrait</className>
      <methodName>getStructureIndex</methodName>
      <methodSignature>getStructureIndex(): array</methodSignature>
      <fullMethod>getStructureIndex(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexJsonTrait</className>
      <methodName>test_json_guest_cannot_get_index</methodName>
      <methodSignature>test_json_guest_cannot_get_index()</methodSignature>
      <fullMethod>test_json_guest_cannot_get_index()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexJsonTrait</className>
      <methodName>test_json_admin_can_get_index</methodName>
      <methodSignature>test_json_admin_can_get_index()</methodSignature>
      <fullMethod>test_json_admin_can_get_index()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexJsonTrait</className>
      <methodName>test_json_admin_can_get_index_with_filters</methodName>
      <methodSignature>test_json_admin_can_get_index_with_filters()</methodSignature>
      <fullMethod>test_json_admin_can_get_index_with_filters()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexTrait</className>
      <methodName>test_guest_cannot_render_index_view</methodName>
      <methodSignature>test_guest_cannot_render_index_view()</methodSignature>
      <fullMethod>test_guest_cannot_render_index_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexTrait</className>
      <methodName>test_admin_can_render_index_view</methodName>
      <methodSignature>test_admin_can_render_index_view()</methodSignature>
      <fullMethod>test_admin_can_render_index_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\IndexTrait</className>
      <methodName>test_admin_can_render_index_view_with_filters</methodName>
      <methodSignature>test_admin_can_render_index_view_with_filters()</methodSignature>
      <fullMethod>test_admin_can_render_index_view_with_filters()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockJsonTrait</className>
      <methodName>getStructureData</methodName>
      <methodSignature>getStructureData(): array</methodSignature>
      <fullMethod>getStructureData(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockJsonTrait</className>
      <methodName>test_json_guest_cannot_lock</methodName>
      <methodSignature>test_json_guest_cannot_lock()</methodSignature>
      <fullMethod>test_json_guest_cannot_lock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockJsonTrait</className>
      <methodName>test_json_lock_as_admin_and_succeed</methodName>
      <methodSignature>test_json_lock_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_json_lock_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockJsonTrait</className>
      <methodName>test_json_lock_as_admin_and_succeed_with_no_redirect</methodName>
      <methodSignature>test_json_lock_as_admin_and_succeed_with_no_redirect()</methodSignature>
      <fullMethod>test_json_lock_as_admin_and_succeed_with_no_redirect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockJsonTrait</className>
      <methodName>test_json_lock_as_user_and_get_denied</methodName>
      <methodSignature>test_json_lock_as_user_and_get_denied()</methodSignature>
      <fullMethod>test_json_lock_as_user_and_get_denied()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockTrait</className>
      <methodName>test_guest_cannot_lock</methodName>
      <methodSignature>test_guest_cannot_lock()</methodSignature>
      <fullMethod>test_guest_cannot_lock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockTrait</className>
      <methodName>test_lock_as_admin_and_succeed</methodName>
      <methodSignature>test_lock_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_lock_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockTrait</className>
      <methodName>test_lock_as_admin_and_succeed_with_redirect_to_index_with_sorted_by_locked_desc</methodName>
      <methodSignature>test_lock_as_admin_and_succeed_with_redirect_to_index_with_sorted_by_locked_desc()</methodSignature>
      <fullMethod>test_lock_as_admin_and_succeed_with_redirect_to_index_with_sorted_by_locked_desc()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\LockTrait</className>
      <methodName>test_lock_as_user_and_get_denied</methodName>
      <methodSignature>test_lock_as_user_and_get_denied()</methodSignature>
      <fullMethod>test_lock_as_user_and_get_denied()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreJsonTrait</className>
      <methodName>getStructureData</methodName>
      <methodSignature>getStructureData(): array</methodSignature>
      <fullMethod>getStructureData(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreJsonTrait</className>
      <methodName>test_json_guest_cannot_restore</methodName>
      <methodSignature>test_json_guest_cannot_restore()</methodSignature>
      <fullMethod>test_json_guest_cannot_restore()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreJsonTrait</className>
      <methodName>test_json_restore_as_admin_and_succeed</methodName>
      <methodSignature>test_json_restore_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_json_restore_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreJsonTrait</className>
      <methodName>test_json_restore_as_admin_and_succeed_with_no_redirect</methodName>
      <methodSignature>test_json_restore_as_admin_and_succeed_with_no_redirect()</methodSignature>
      <fullMethod>test_json_restore_as_admin_and_succeed_with_no_redirect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreJsonTrait</className>
      <methodName>test_json_restore_as_user_and_get_denied</methodName>
      <methodSignature>test_json_restore_as_user_and_get_denied()</methodSignature>
      <fullMethod>test_json_restore_as_user_and_get_denied()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>getGetFqdnRevision</methodName>
      <methodSignature>getGetFqdnRevision(): string</methodSignature>
      <fullMethod>getGetFqdnRevision(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>getRevisionId</methodName>
      <methodSignature>getRevisionId(): string</methodSignature>
      <fullMethod>getRevisionId(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>getRevisionRouteParameter</methodName>
      <methodSignature>getRevisionRouteParameter(): string</methodSignature>
      <fullMethod>getRevisionRouteParameter(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>getStructureData</methodName>
      <methodSignature>getStructureData(): array</methodSignature>
      <fullMethod>getStructureData(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>test_json_guest_cannot_restore_revision</methodName>
      <methodSignature>test_json_guest_cannot_restore_revision()</methodSignature>
      <fullMethod>test_json_guest_cannot_restore_revision()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>test_json_restore_revision_as_admin_and_succeed</methodName>
      <methodSignature>test_json_restore_revision_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_json_restore_revision_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>test_json_restore_revision_as_admin_and_succeed_without_redirect</methodName>
      <methodSignature>test_json_restore_revision_as_admin_and_succeed_without_redirect()</methodSignature>
      <fullMethod>test_json_restore_revision_as_admin_and_succeed_without_redirect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionJsonTrait</className>
      <methodName>test_json_restore_revision_as_user_and_get_denied</methodName>
      <methodSignature>test_json_restore_revision_as_user_and_get_denied()</methodSignature>
      <fullMethod>test_json_restore_revision_as_user_and_get_denied()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>getGetFqdnRevision</methodName>
      <methodSignature>getGetFqdnRevision(): string</methodSignature>
      <fullMethod>getGetFqdnRevision(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>getRevisionId</methodName>
      <methodSignature>getRevisionId(): string</methodSignature>
      <fullMethod>getRevisionId(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>getRevisionRouteParameter</methodName>
      <methodSignature>getRevisionRouteParameter(): string</methodSignature>
      <fullMethod>getRevisionRouteParameter(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>test_guest_cannot_restore_revision</methodName>
      <methodSignature>test_guest_cannot_restore_revision()</methodSignature>
      <fullMethod>test_guest_cannot_restore_revision()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>test_restore_revision_as_admin_and_succeed</methodName>
      <methodSignature>test_restore_revision_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_restore_revision_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>test_restore_revision_as_admin_and_succeed_with_redirect_to_index_with_only_trash</methodName>
      <methodSignature>test_restore_revision_as_admin_and_succeed_with_redirect_to_index_with_only_trash()</methodSignature>
      <fullMethod>test_restore_revision_as_admin_and_succeed_with_redirect_to_index_with_only_trash()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreRevisionTrait</className>
      <methodName>test_restore_revision_as_user_and_get_denied</methodName>
      <methodSignature>test_restore_revision_as_user_and_get_denied()</methodSignature>
      <fullMethod>test_restore_revision_as_user_and_get_denied()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreTrait</className>
      <methodName>test_guest_cannot_restore</methodName>
      <methodSignature>test_guest_cannot_restore()</methodSignature>
      <fullMethod>test_guest_cannot_restore()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreTrait</className>
      <methodName>test_restore_as_admin_and_succeed</methodName>
      <methodSignature>test_restore_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_restore_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreTrait</className>
      <methodName>test_restore_as_admin_and_succeed_with_redirect_to_index_with_only_trash</methodName>
      <methodSignature>test_restore_as_admin_and_succeed_with_redirect_to_index_with_only_trash()</methodSignature>
      <fullMethod>test_restore_as_admin_and_succeed_with_redirect_to_index_with_only_trash()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RestoreTrait</className>
      <methodName>test_restore_as_user_and_get_denied</methodName>
      <methodSignature>test_restore_as_user_and_get_denied()</methodSignature>
      <fullMethod>test_restore_as_user_and_get_denied()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionJsonTrait</className>
      <methodName>getGetFqdnRevision</methodName>
      <methodSignature>getGetFqdnRevision(): string</methodSignature>
      <fullMethod>getGetFqdnRevision(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionJsonTrait</className>
      <methodName>getRevisionId</methodName>
      <methodSignature>getRevisionId(): string</methodSignature>
      <fullMethod>getRevisionId(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionJsonTrait</className>
      <methodName>getRevisionRouteParameter</methodName>
      <methodSignature>getRevisionRouteParameter(): string</methodSignature>
      <fullMethod>getRevisionRouteParameter(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionJsonTrait</className>
      <methodName>test_json_guest_cannot_render_revision_view</methodName>
      <methodSignature>test_json_guest_cannot_render_revision_view()</methodSignature>
      <fullMethod>test_json_guest_cannot_render_revision_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionJsonTrait</className>
      <methodName>test_json_admin_can_get_revision_info</methodName>
      <methodSignature>test_json_admin_can_get_revision_info()</methodSignature>
      <fullMethod>test_json_admin_can_get_revision_info()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionTrait</className>
      <methodName>getGetFqdnRevision</methodName>
      <methodSignature>getGetFqdnRevision(): string</methodSignature>
      <fullMethod>getGetFqdnRevision(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionTrait</className>
      <methodName>getRevisionId</methodName>
      <methodSignature>getRevisionId(): string</methodSignature>
      <fullMethod>getRevisionId(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionTrait</className>
      <methodName>getRevisionRouteParameter</methodName>
      <methodSignature>getRevisionRouteParameter(): string</methodSignature>
      <fullMethod>getRevisionRouteParameter(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionTrait</className>
      <methodName>test_guest_cannot_render_revision_view</methodName>
      <methodSignature>test_guest_cannot_render_revision_view()</methodSignature>
      <fullMethod>test_guest_cannot_render_revision_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionTrait</className>
      <methodName>test_revision_view_rendered_by_admin</methodName>
      <methodSignature>test_revision_view_rendered_by_admin()</methodSignature>
      <fullMethod>test_revision_view_rendered_by_admin()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsJsonTrait</className>
      <methodName>getGetFqdnRevision</methodName>
      <methodSignature>getGetFqdnRevision(): string</methodSignature>
      <fullMethod>getGetFqdnRevision(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsJsonTrait</className>
      <methodName>test_json_guest_cannot_get_revisions</methodName>
      <methodSignature>test_json_guest_cannot_get_revisions()</methodSignature>
      <fullMethod>test_json_guest_cannot_get_revisions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsJsonTrait</className>
      <methodName>test_json_admin_can_get_revisions</methodName>
      <methodSignature>test_json_admin_can_get_revisions()</methodSignature>
      <fullMethod>test_json_admin_can_get_revisions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsJsonTrait</className>
      <methodName>test_json_admin_can_get_revisions_with_filters</methodName>
      <methodSignature>test_json_admin_can_get_revisions_with_filters()</methodSignature>
      <fullMethod>test_json_admin_can_get_revisions_with_filters()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsTrait</className>
      <methodName>getGetFqdnRevision</methodName>
      <methodSignature>getGetFqdnRevision(): string</methodSignature>
      <fullMethod>getGetFqdnRevision(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsTrait</className>
      <methodName>test_guest_cannot_render_revisions_view</methodName>
      <methodSignature>test_guest_cannot_render_revisions_view()</methodSignature>
      <fullMethod>test_guest_cannot_render_revisions_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsTrait</className>
      <methodName>test_admin_can_render_revisions_view</methodName>
      <methodSignature>test_admin_can_render_revisions_view()</methodSignature>
      <fullMethod>test_admin_can_render_revisions_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\RevisionsTrait</className>
      <methodName>test_admin_can_render_revisions_view_with_filters</methodName>
      <methodSignature>test_admin_can_render_revisions_view_with_filters()</methodSignature>
      <fullMethod>test_admin_can_render_revisions_view_with_filters()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\ShowJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\ShowJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\ShowJsonTrait</className>
      <methodName>test_json_guest_cannot_see_info</methodName>
      <methodSignature>test_json_guest_cannot_see_info()</methodSignature>
      <fullMethod>test_json_guest_cannot_see_info()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\ShowJsonTrait</className>
      <methodName>test_json_show_info_for_admin</methodName>
      <methodSignature>test_json_show_info_for_admin()</methodSignature>
      <fullMethod>test_json_show_info_for_admin()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\ShowTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\ShowTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\ShowTrait</className>
      <methodName>test_guest_cannot_render_show_view</methodName>
      <methodSignature>test_guest_cannot_render_show_view()</methodSignature>
      <fullMethod>test_guest_cannot_render_show_view()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\ShowTrait</className>
      <methodName>test_show_view_rendered_by_admin</methodName>
      <methodSignature>test_show_view_rendered_by_admin()</methodSignature>
      <fullMethod>test_show_view_rendered_by_admin()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreJsonTrait</className>
      <methodName>getStructureData</methodName>
      <methodSignature>getStructureData(): array</methodSignature>
      <fullMethod>getStructureData(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreJsonTrait</className>
      <methodName>test_json_guest_cannot_store</methodName>
      <methodSignature>test_json_guest_cannot_store()</methodSignature>
      <fullMethod>test_json_guest_cannot_store()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreJsonTrait</className>
      <methodName>test_json_store_as_admin_without_payload_and_fail_validation</methodName>
      <methodSignature>test_json_store_as_admin_without_payload_and_fail_validation()</methodSignature>
      <fullMethod>test_json_store_as_admin_without_payload_and_fail_validation()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreJsonTrait</className>
      <methodName>test_json_store_as_admin_and_succeed</methodName>
      <methodSignature>test_json_store_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_json_store_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreTrait</className>
      <methodName>test_guest_cannot_store</methodName>
      <methodSignature>test_guest_cannot_store()</methodSignature>
      <fullMethod>test_guest_cannot_store()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreTrait</className>
      <methodName>test_store_as_admin_without_payload_and_fail_validation</methodName>
      <methodSignature>test_store_as_admin_without_payload_and_fail_validation()</methodSignature>
      <fullMethod>test_store_as_admin_without_payload_and_fail_validation()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreTrait</className>
      <methodName>test_store_as_admin_and_succeed</methodName>
      <methodSignature>test_store_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_store_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\StoreTrait</className>
      <methodName>test_store_as_admin_and_succeed_with_return_url</methodName>
      <methodSignature>test_store_as_admin_and_succeed_with_return_url()</methodSignature>
      <fullMethod>test_store_as_admin_and_succeed_with_return_url()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockJsonTrait</className>
      <methodName>getStructureData</methodName>
      <methodSignature>getStructureData(): array</methodSignature>
      <fullMethod>getStructureData(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockJsonTrait</className>
      <methodName>test_json_guest_cannot_unlock</methodName>
      <methodSignature>test_json_guest_cannot_unlock()</methodSignature>
      <fullMethod>test_json_guest_cannot_unlock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockJsonTrait</className>
      <methodName>test_json_unlock_as_admin_and_succeed</methodName>
      <methodSignature>test_json_unlock_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_json_unlock_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockJsonTrait</className>
      <methodName>test_json_unlock_as_admin_and_succeed_with_no_redirect</methodName>
      <methodSignature>test_json_unlock_as_admin_and_succeed_with_no_redirect()</methodSignature>
      <fullMethod>test_json_unlock_as_admin_and_succeed_with_no_redirect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockJsonTrait</className>
      <methodName>test_json_unlock_as_user_and_get_denied</methodName>
      <methodSignature>test_json_unlock_as_user_and_get_denied()</methodSignature>
      <fullMethod>test_json_unlock_as_user_and_get_denied()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockTrait</className>
      <methodName>getStructureData</methodName>
      <methodSignature>getStructureData(): array</methodSignature>
      <fullMethod>getStructureData(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockTrait</className>
      <methodName>test_guest_cannot_unlock</methodName>
      <methodSignature>test_guest_cannot_unlock()</methodSignature>
      <fullMethod>test_guest_cannot_unlock()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockTrait</className>
      <methodName>test_unlock_as_admin_and_succeed</methodName>
      <methodSignature>test_unlock_as_admin_and_succeed()</methodSignature>
      <fullMethod>test_unlock_as_admin_and_succeed()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockTrait</className>
      <methodName>test_unlock_as_admin_and_succeed_with_redirect_to_index_with_sorted_by_unlocked_desc</methodName>
      <methodSignature>test_unlock_as_admin_and_succeed_with_redirect_to_index_with_sorted_by_unlocked_desc()</methodSignature>
      <fullMethod>test_unlock_as_admin_and_succeed_with_redirect_to_index_with_sorted_by_unlocked_desc()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UnlockTrait</className>
      <methodName>test_unlock_as_user_and_get_denied</methodName>
      <methodSignature>test_unlock_as_user_and_get_denied()</methodSignature>
      <fullMethod>test_unlock_as_user_and_get_denied()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateJsonTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateJsonTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateJsonTrait</className>
      <methodName>test_json_guest_cannot_update</methodName>
      <methodSignature>test_json_guest_cannot_update()</methodSignature>
      <fullMethod>test_json_guest_cannot_update()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateJsonTrait</className>
      <methodName>test_json_update_as_admin_without_payload_and_fail_validation</methodName>
      <methodSignature>test_json_update_as_admin_without_payload_and_fail_validation()</methodSignature>
      <fullMethod>test_json_update_as_admin_without_payload_and_fail_validation()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateJsonTrait</className>
      <methodName>test_json_admin_can_update</methodName>
      <methodSignature>test_json_admin_can_update()</methodSignature>
      <fullMethod>test_json_admin_can_update()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateTrait</className>
      <methodName>getGetFqdn</methodName>
      <methodSignature>getGetFqdn(): string</methodSignature>
      <fullMethod>getGetFqdn(): string</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateTrait</className>
      <methodName>getPackageInfo</methodName>
      <methodSignature>getPackageInfo(): array</methodSignature>
      <fullMethod>getPackageInfo(): array</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateTrait</className>
      <methodName>test_guest_cannot_update</methodName>
      <methodSignature>test_guest_cannot_update()</methodSignature>
      <fullMethod>test_guest_cannot_update()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateTrait</className>
      <methodName>test_update_as_admin_without_payload_and_fail_validation</methodName>
      <methodSignature>test_update_as_admin_without_payload_and_fail_validation()</methodSignature>
      <fullMethod>test_update_as_admin_without_payload_and_fail_validation()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateTrait</className>
      <methodName>test_admin_can_update</methodName>
      <methodSignature>test_admin_can_update()</methodSignature>
      <fullMethod>test_admin_can_update()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Http\Controllers\Resource\Playground</package>
      <className>Playground\Test\Feature\Http\Controllers\Resource\Playground\UpdateTrait</className>
      <methodName>test_admin_can_update_view_with_return_url</methodName>
      <methodSignature>test_admin_can_update_view_with_return_url()</methodSignature>
      <fullMethod>test_admin_can_update_view_with_return_url()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>getModel</methodName>
      <methodSignature>getModel(): Illuminate\Database\Eloquent\Model</methodSignature>
      <fullMethod>getModel(): Illuminate\Database\Eloquent\Model</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>getModelClass</methodName>
      <methodSignature>getModelClass(): string</methodSignature>
      <fullMethod>getModelClass(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>test_model_instance</methodName>
      <methodSignature>test_model_instance(): void</methodSignature>
      <fullMethod>test_model_instance(): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>verifyRelationship</methodName>
      <methodSignature>verifyRelationship(string $relationshipType, string $accessor): bool</methodSignature>
      <fullMethod>verifyRelationship(string $relationshipType, string $accessor): bool</fullMethod>
      <crap>272</crap>
      <complexity>16</complexity>
      <coverage>0</coverage>
      <crapLoad>16</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>verifyRelationships</methodName>
      <methodSignature>verifyRelationships(): array</methodSignature>
      <fullMethod>verifyRelationships(): array</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>verifyRelationshipHasOne</methodName>
      <methodSignature>verifyRelationshipHasOne(Illuminate\Database\Eloquent\Model $model, string $accessor): void</methodSignature>
      <fullMethod>verifyRelationshipHasOne(Illuminate\Database\Eloquent\Model $model, string $accessor): void</fullMethod>
      <crap>342</crap>
      <complexity>18</complexity>
      <coverage>0</coverage>
      <crapLoad>18</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>verifyRelationshipHasMany</methodName>
      <methodSignature>verifyRelationshipHasMany(Illuminate\Database\Eloquent\Model $model, string $accessor): void</methodSignature>
      <fullMethod>verifyRelationshipHasMany(Illuminate\Database\Eloquent\Model $model, string $accessor): void</fullMethod>
      <crap>240</crap>
      <complexity>15</complexity>
      <coverage>0</coverage>
      <crapLoad>15</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>test_verify_model_relationships</methodName>
      <methodSignature>test_verify_model_relationships(): void</methodSignature>
      <fullMethod>test_verify_model_relationships(): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Feature\Models</package>
      <className>Playground\Test\Feature\Models\ModelCase</className>
      <methodName>test_factory_create</methodName>
      <methodSignature>test_factory_create(): void</methodSignature>
      <fullMethod>test_factory_create(): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\MockingTrait</className>
      <methodName>mockRequest</methodName>
      <methodSignature>mockRequest(string $requestClass, string $uri, string $method, array $parameters, array $cookies, array $files, array $server, $content)</methodSignature>
      <fullMethod>mockRequest(string $requestClass, string $uri, string $method, array $parameters, array $cookies, array $files, array $server, $content)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\MockingTrait</className>
      <methodName>invokeProtected</methodName>
      <methodSignature>invokeProtected($out, $method, array $params): mixed</methodSignature>
      <fullMethod>invokeProtected($out, $method, array $params): mixed</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\MockingTrait</className>
      <methodName>setProtected</methodName>
      <methodSignature>setProtected($out, string $property, mixed $value): void</methodSignature>
      <fullMethod>setProtected($out, string $property, mixed $value): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Models</package>
      <className>Playground\Test\Models\AbstractUser</className>
      <methodName>casts</methodName>
      <methodSignature>casts(): array</methodSignature>
      <fullMethod>casts(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Models\Concerns</package>
      <className>Playground\Test\Models\Concerns\UserPrivileges</className>
      <methodName>getAttribute</methodName>
      <methodSignature>getAttribute($key)</methodSignature>
      <fullMethod>getAttribute($key)</fullMethod>
      <crap>0</crap>
      <complexity>0</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Models\Concerns</package>
      <className>Playground\Test\Models\Concerns\UserPrivileges</className>
      <methodName>hasPrivilege</methodName>
      <methodSignature>hasPrivilege(mixed $privilege, bool $inclusive): bool</methodSignature>
      <fullMethod>hasPrivilege(mixed $privilege, bool $inclusive): bool</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Models\Concerns</package>
      <className>Playground\Test\Models\Concerns\UserPrivileges</className>
      <methodName>hasRole</methodName>
      <methodSignature>hasRole(mixed $roles, bool $inclusive): bool</methodSignature>
      <fullMethod>hasRole(mixed $roles, bool $inclusive): bool</fullMethod>
      <crap>34.12</crap>
      <complexity>13</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Models\Concerns</package>
      <className>Playground\Test\Models\Concerns\UserPrivileges</className>
      <methodName>isAdmin</methodName>
      <methodSignature>isAdmin(): bool</methodSignature>
      <fullMethod>isAdmin(): bool</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Models</package>
      <className>Playground\Test\Models\DefaultUser</className>
      <methodName>casts</methodName>
      <methodSignature>casts(): array</methodSignature>
      <fullMethod>casts(): array</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Models</package>
      <className>Playground\Test\Models\UserWithRole</className>
      <methodName>hasRole</methodName>
      <methodSignature>hasRole(mixed $roles): bool</methodSignature>
      <fullMethod>hasRole(mixed $roles): bool</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Models</package>
      <className>Playground\Test\Models\UserWithRole</className>
      <methodName>isAdmin</methodName>
      <methodSignature>isAdmin(): bool</methodSignature>
      <fullMethod>isAdmin(): bool</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\ServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot()</methodSignature>
      <fullMethod>boot()</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\ServiceProvider</className>
      <methodName>about</methodName>
      <methodSignature>about(): void</methodSignature>
      <fullMethod>about(): void</fullMethod>
      <crap>7</crap>
      <complexity>7</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\ServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\ServiceProvider</className>
      <methodName>version</methodName>
      <methodSignature>version(): string</methodSignature>
      <fullMethod>version(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\SqlTrait</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp(): void</methodSignature>
      <fullMethod>setUp(): void</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\SqlTrait</className>
      <methodName>replace_quotes</methodName>
      <methodSignature>replace_quotes(string $sql): string</methodSignature>
      <fullMethod>replace_quotes(string $sql): string</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Http\Requests</package>
      <className>Playground\Test\Unit\Http\Requests\RequestCase</className>
      <methodName>getRequest</methodName>
      <methodSignature>getRequest(): Illuminate\Foundation\Http\FormRequest</methodSignature>
      <fullMethod>getRequest(): Illuminate\Foundation\Http\FormRequest</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Http\Requests</package>
      <className>Playground\Test\Unit\Http\Requests\RequestCase</className>
      <methodName>getRequestClass</methodName>
      <methodSignature>getRequestClass(): string</methodSignature>
      <fullMethod>getRequestClass(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Http\Requests</package>
      <className>Playground\Test\Unit\Http\Requests\RequestCase</className>
      <methodName>test_request_instance</methodName>
      <methodSignature>test_request_instance(): void</methodSignature>
      <fullMethod>test_request_instance(): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Models</package>
      <className>Playground\Test\Unit\Models\ModelCase</className>
      <methodName>getEnvironmentSetUp</methodName>
      <methodSignature>getEnvironmentSetUp($app)</methodSignature>
      <fullMethod>getEnvironmentSetUp($app)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Models</package>
      <className>Playground\Test\Unit\Models\ModelCase</className>
      <methodName>getModel</methodName>
      <methodSignature>getModel(): Illuminate\Database\Eloquent\Model</methodSignature>
      <fullMethod>getModel(): Illuminate\Database\Eloquent\Model</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Models</package>
      <className>Playground\Test\Unit\Models\ModelCase</className>
      <methodName>getModelClass</methodName>
      <methodSignature>getModelClass(): string</methodSignature>
      <fullMethod>getModelClass(): string</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Models</package>
      <className>Playground\Test\Unit\Models\ModelCase</className>
      <methodName>test_model_instance</methodName>
      <methodSignature>test_model_instance(): void</methodSignature>
      <fullMethod>test_model_instance(): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Models</package>
      <className>Playground\Test\Unit\Models\ModelCase</className>
      <methodName>verifyRelationship</methodName>
      <methodSignature>verifyRelationship(string $relationshipType, string $accessor): bool</methodSignature>
      <fullMethod>verifyRelationship(string $relationshipType, string $accessor): bool</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Models</package>
      <className>Playground\Test\Unit\Models\ModelCase</className>
      <methodName>verifyRelationships</methodName>
      <methodSignature>verifyRelationships(): array</methodSignature>
      <fullMethod>verifyRelationships(): array</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Models</package>
      <className>Playground\Test\Unit\Models\ModelCase</className>
      <methodName>test_verify_model_relationships</methodName>
      <methodSignature>test_verify_model_relationships(): void</methodSignature>
      <fullMethod>test_verify_model_relationships(): void</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test\Unit\Models</package>
      <className>Playground\Test\Unit\Models\ModelCase</className>
      <methodName>test_model_factory_make</methodName>
      <methodSignature>test_model_factory_make(): void</methodSignature>
      <fullMethod>test_model_factory_make(): void</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Test</package>
      <className>Playground\Test\WithFaker</className>
      <methodName>faker</methodName>
      <methodSignature>faker(string $locale): Faker\Generator</methodSignature>
      <fullMethod>faker(string $locale): Faker\Generator</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Abilities</className>
      <methodName>hasAbility</methodName>
      <methodSignature>hasAbility(mixed $ability): bool</methodSignature>
      <fullMethod>hasAbility(mixed $ability): bool</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Abilities</className>
      <methodName>addAbility</methodName>
      <methodSignature>addAbility(mixed $ability): void</methodSignature>
      <fullMethod>addAbility(mixed $ability): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Abilities</className>
      <methodName>removeAbility</methodName>
      <methodSignature>removeAbility(mixed $ability): void</methodSignature>
      <fullMethod>removeAbility(mixed $ability): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Admin</className>
      <methodName>isAdmin</methodName>
      <methodSignature>isAdmin(): bool</methodSignature>
      <fullMethod>isAdmin(): bool</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Privileges</className>
      <methodName>hasPrivilege</methodName>
      <methodSignature>hasPrivilege(mixed $privilege): bool</methodSignature>
      <fullMethod>hasPrivilege(mixed $privilege): bool</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Privileges</className>
      <methodName>addPrivilege</methodName>
      <methodSignature>addPrivilege(mixed $privilege): void</methodSignature>
      <fullMethod>addPrivilege(mixed $privilege): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Privileges</className>
      <methodName>removePrivilege</methodName>
      <methodSignature>removePrivilege(mixed $privilege): void</methodSignature>
      <fullMethod>removePrivilege(mixed $privilege): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Role</className>
      <methodName>hasRole</methodName>
      <methodSignature>hasRole(mixed $role): bool</methodSignature>
      <fullMethod>hasRole(mixed $role): bool</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Role</className>
      <methodName>addRole</methodName>
      <methodSignature>addRole(mixed $role): void</methodSignature>
      <fullMethod>addRole(mixed $role): void</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\Role</className>
      <methodName>removeRole</methodName>
      <methodSignature>removeRole(mixed $role): void</methodSignature>
      <fullMethod>removeRole(mixed $role): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\WithChildren</className>
      <methodName>children</methodName>
      <methodSignature>children(): Illuminate\Database\Eloquent\Relations\HasMany</methodSignature>
      <fullMethod>children(): Illuminate\Database\Eloquent\Relations\HasMany</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\WithCreator</className>
      <methodName>creator</methodName>
      <methodSignature>creator(): Illuminate\Database\Eloquent\Relations\HasOne</methodSignature>
      <fullMethod>creator(): Illuminate\Database\Eloquent\Relations\HasOne</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\WithModifier</className>
      <methodName>modifier</methodName>
      <methodSignature>modifier(): Illuminate\Database\Eloquent\Relations\HasOne</methodSignature>
      <fullMethod>modifier(): Illuminate\Database\Eloquent\Relations\HasOne</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\WithOwner</className>
      <methodName>owner</methodName>
      <methodSignature>owner(): Illuminate\Database\Eloquent\Relations\HasOne</methodSignature>
      <fullMethod>owner(): Illuminate\Database\Eloquent\Relations\HasOne</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Concerns</package>
      <className>Playground\Models\Concerns\WithParent</className>
      <methodName>parent</methodName>
      <methodSignature>parent(): Illuminate\Database\Eloquent\Relations\HasOne</methodSignature>
      <fullMethod>parent(): Illuminate\Database\Eloquent\Relations\HasOne</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Scopes</package>
      <className>Playground\Models\Scopes\ScopeFilterColumns</className>
      <methodName>scopeFilterColumns</methodName>
      <methodSignature>scopeFilterColumns(Illuminate\Database\Eloquent\Builder $query, array $columns, array $validated): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterColumns(Illuminate\Database\Eloquent\Builder $query, array $columns, array $validated): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>31</crap>
      <complexity>31</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Scopes</package>
      <className>Playground\Models\Scopes\ScopeFilterDates</className>
      <methodName>scopeFilterDates</methodName>
      <methodSignature>scopeFilterDates(Illuminate\Database\Eloquent\Builder $query, array $dates, array $validated): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterDates(Illuminate\Database\Eloquent\Builder $query, array $dates, array $validated): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>43</crap>
      <complexity>43</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Scopes</package>
      <className>Playground\Models\Scopes\ScopeFilterFlags</className>
      <methodName>scopeFilterFlags</methodName>
      <methodSignature>scopeFilterFlags(Illuminate\Database\Eloquent\Builder $query, array $flags, array $validated): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterFlags(Illuminate\Database\Eloquent\Builder $query, array $flags, array $validated): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>9</crap>
      <complexity>9</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Scopes</package>
      <className>Playground\Models\Scopes\ScopeFilterIds</className>
      <methodName>scopeFilterIds</methodName>
      <methodSignature>scopeFilterIds(Illuminate\Database\Eloquent\Builder $query, array $ids, array $validated): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterIds(Illuminate\Database\Eloquent\Builder $query, array $ids, array $validated): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>27</crap>
      <complexity>27</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Scopes</package>
      <className>Playground\Models\Scopes\ScopeFilterTrash</className>
      <methodName>scopeFilterTrash</methodName>
      <methodSignature>scopeFilterTrash(Illuminate\Database\Eloquent\Builder $query, string $visibility): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterTrash(Illuminate\Database\Eloquent\Builder $query, string $visibility): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>7</crap>
      <complexity>7</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Scopes</package>
      <className>Playground\Models\Scopes\ScopeSort</className>
      <methodName>scopeSort</methodName>
      <methodSignature>scopeSort(Illuminate\Database\Eloquent\Builder $query, mixed $sort): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeSort(Illuminate\Database\Eloquent\Builder $query, mixed $sort): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>16</crap>
      <complexity>16</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot(): void</methodSignature>
      <fullMethod>boot(): void</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>about</methodName>
      <methodSignature>about(array $config): void</methodSignature>
      <fullMethod>about(array $config): void</fullMethod>
      <crap>23</crap>
      <complexity>23</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>userPrimaryKeyType</methodName>
      <methodSignature>userPrimaryKeyType(string $auth_providers_users_model): string</methodSignature>
      <fullMethod>userPrimaryKeyType(string $auth_providers_users_model): string</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>userPrimaryKeyTypeParse</methodName>
      <methodSignature>userPrimaryKeyTypeParse(string $auth_providers_users_model): string</methodSignature>
      <fullMethod>userPrimaryKeyTypeParse(string $auth_providers_users_model): string</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>version</methodName>
      <methodSignature>version(): string</methodSignature>
      <fullMethod>version(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
